#-*- coding:utf-8 -*-
import json
from elasticsearch import Elasticsearch
from flask import Flask, render_template,redirect, url_for,request
app = Flask(__name__)
es = Elasticsearch()
#eres=es.index(index="merge", doc_type="merge", id=12345 , body={"category": '30', "acc_likes": 'wwegwe'})
doc = {
    'author': 'kimchy',
    'text': 'Elasticsearch: cool. bonsai cool.'
}

list=['tet','3r3']
@app.route("/hello/")
@app.route("/hello/<name>")
def hello(name=None):
    search_results = es.search(index="merge", doc_type='merge',body={"sort": {"acc_score": {"order": "desc"}}}, size=3)
                                    #body={"sort": {"acc_score": {"order": "desc"}}}, size=30)
    result1=search_results['hits']['hits']
    for i in result1:
        result1=i['_source']['category']

    #result2=result1['_source']['category']
    return render_template('hello.html', name=name,pop=search_results,pop1=result1)

@app.route("/")
def main_page():
    return render_template('index.html')

@app.route("/WtoF")
def WtoF():
    res = []
    return render_template('WtoF.html',res=res)

@app.route('/post/<int:post_id>')
def show_post(post_id):
    # show the post with the given id, the id is an integer
    return 'Post %d' % post_id

@app.route('/profile/<username>')
def get_profile(username):
 return 'profile : ' + username

@app.route("/nouns")
def nouns():
    ret_data = {}
    ret_data['result'] = '253wlnl'
    return json.dumps(ret_data)
@app.route('/result',methods = ['POST', 'GET'])
def routind():
    res = []
    if request.method == 'POST':
        if(request.form):
            size = len(request.form)
            if (size == 1):
                search_results = es.search(index="analysis", doc_type='ANOVA', body={"sort": {"F": {"order": "desc"}},"query":{"bool" : { "must" : [{"match":{"factor": request.form.keys()[0]}},{"match":{"positive" : "true"}}],"filter" : [{"range":{"1-p":{"gte" : 0.99}}}]}}}, size=800)
                results_1 = search_results['hits']['hits']
                exist = []
                max_1 = 0
                temp = []
                for i in range(0, len(results_1)):
                    if (results_1[i]['_source']['food'] in exist):  # 겹치면 삭제
                        continue
                    else:
                        exist.append(results_1[i]['_source']['food'])
                        temp.append(results_1[i])
                    max_1 = max(max_1, results_1[i]['_source']['F'])
                results_1 = temp
                print max_1
                for result in results_1:
                    result['_source']['F'] = (result['_source']['F'] * 100) / max_1
                    res.append(result['_source'])

            elif (size == 2):
                search_results_1 = es.search(index="analysis", doc_type='ANOVA', body={"sort": {"F": {"order": "desc"}},"query":{"bool" : { "must" : [{"match":{"factor": request.form.keys()[0]}},{"match":{"positive" : "true"}}],"filter" : [{"range":{"1-p":{"gte" : 0.99}}}]}}}, size=800)
                search_results_2 = es.search(index="analysis", doc_type='ANOVA', body={"sort": {"F": {"order": "desc"}},"query":{"bool" : { "must" : [{"match":{"factor": request.form.keys()[1]}},{"match":{"positive" : "true"}}],"filter" : [{"range":{"1-p":{"gte" : 0.99}}}]}}}, size=800)
                results_1 = search_results_1['hits']['hits']
                results_2 = search_results_2['hits']['hits']

                exist = []
                max_1 = 0
                temp = []
                for i in range(0, len(results_1)):
                    if(results_1[i]['_source']['food'] in exist): #겹치면 삭제
                        continue
                    else:
                        exist.append(results_1[i]['_source']['food'])
                        temp.append(results_1[i])
                    max_1 = max(max_1,results_1[i]['_source']['F'])
                results_1 = temp

                exist = []
                max_2 = 0
                temp = []
                for i in range(0, len(results_2)):
                    if(results_2[i]['_source']['food'] in exist):  # 겹치면 삭제
                        continue
                    else:
                        exist.append(results_2[i]['_source']['food'])
                        temp.append(results_2[i])
                    max_2 = max(max_2, results_2[i]['_source']['F'])
                results_2 = temp


                for result in results_1:
                    print "1 %s, " % result['_source']['food']
                for result in results_2:
                    print "2 %s, " % result['_source']['food']

                for result in results_1:
                    result['_source']['F'] = (result['_source']['F']*100)/max_1
                for result in results_2:
                    result['_source']['F'] = (result['_source']['F'] * 100)/max_2

                k=0
                res = []
                for i in range(0,len(results_1)):
                    for j in range(0, len(results_2)):
                        if(results_1[i]['_source']['food'] == results_2[j]['_source']['food']):
                            results_1[i]['_source']['F'] = results_1[i]['_source']['F'] + results_2[j]['_source']['F']
                            res.append(results_1[i]['_source'])

                #하나 속성만 가질 때는 안보여주는 것으로 하지
                res = sorted(res, key=lambda k: k['F'],reverse=True)

    return render_template('WtoF.html', res=res)

if __name__ == "__main__":
    app.debug = True
    app.run(host = "0.0.0.0")